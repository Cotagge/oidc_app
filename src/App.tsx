import React, { useState, useEffect } from 'react';
import './App.css';

// TypeScript interface pro u≈æivatelsk√© informace
interface UserInfo {
  name: string;
  email: string;
  roles: string[];
  preferred_username?: string;
  given_name?: string;
  family_name?: string;
  sub?: string;
}

// TypeScript interface pro Keycloak konfiguraci
interface KeycloakConfig {
  url: string;
  realm: string;
  clientId: string;
}

const App: React.FC = () => {
  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);
  const [userInfo, setUserInfo] = useState<UserInfo | null>(null);
  const [loading, setLoading] = useState<boolean>(true);

  // Konfigurace pro Keycloak - pou≈æije environment variables
  const KEYCLOAK_CONFIG: KeycloakConfig = {
    url: process.env.REACT_APP_KEYCLOAK_URL || 'https://your-keycloak-server.com',
    realm: process.env.REACT_APP_KEYCLOAK_REALM || 'your-realm',
    clientId: process.env.REACT_APP_KEYCLOAK_CLIENT_ID || 'your-client-id'
  };

  useEffect(() => {
    console.log('üöÄ Aplikace se naƒç√≠t√°...');
    checkAuthStatus();
    parseKeycloakCallback();
  }, []);

  // Zpracov√°n√≠ n√°vratu z Keycloak
  const parseKeycloakCallback = (): void => {
    const urlParams = new URLSearchParams(window.location.search);
    const code = urlParams.get('code');
    const error = urlParams.get('error');
    
    if (error) {
      console.error('‚ùå Keycloak error:', error);
      alert(`Chyba p≈ôi p≈ôihl√°≈°en√≠: ${error}`);
      setLoading(false);
      return;
    }
    
    if (code) {
      console.log('‚úÖ Keycloak vr√°til authorization code:', code);
      
      // Zkontroluj jestli u≈æ tento code nebyl pou≈æit
      const usedCode = localStorage.getItem('used_auth_code');
      if (usedCode === code) {
        console.log('‚ö†Ô∏è Authorization code u≈æ byl pou≈æit - ignoruji');
        setLoading(false);
        return;
      }
      
      // Oznaƒç code jako pou≈æit√Ω
      localStorage.setItem('used_auth_code', code);
      
      // Vymƒõ≈à code za token
      exchangeCodeForToken(code);
      return;
    }
    
    // Pokud nen√≠ ani code ani error, pokraƒçuj norm√°lnƒõ
    setLoading(false);
  };

  // V√Ωmƒõna code za token
  const exchangeCodeForToken = async (code: string): Promise<void> => {
    try {
      console.log('üîÑ Vymƒõ≈àujem code za token...');
      
      const tokenUrl = `${KEYCLOAK_CONFIG.url}/realms/${KEYCLOAK_CONFIG.realm}/protocol/openid-connect/token`;
      const redirectUri = window.location.origin;
      
      const requestBody = new URLSearchParams({
        grant_type: 'authorization_code',
        client_id: KEYCLOAK_CONFIG.clientId,
        code: code,
        redirect_uri: redirectUri
      });
      
      console.log('üì° Token endpoint:', tokenUrl);
      console.log('üîç Request details:', {
        grant_type: 'authorization_code',
        client_id: KEYCLOAK_CONFIG.clientId,
        code: code.substring(0, 20) + '...',
        redirect_uri: redirectUri
      });
      
      const tokenResponse = await fetch(tokenUrl, {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: requestBody
      });
      
      console.log('üì° Token response status:', tokenResponse.status);
      
      if (!tokenResponse.ok) {
        const errorData = await tokenResponse.json();
        console.error('‚ùå Token endpoint error:', errorData);
        
        if (errorData.error === 'invalid_grant') {
          console.log('üîç Invalid grant debug:');
          console.log('- Redirect URI v requestu:', redirectUri);
          console.log('- Code:', code);
          
          throw new Error(`Authorization code je neplatn√Ω!

Mo≈æn√© p≈ô√≠ƒçiny:
1. Code u≈æ byl pou≈æit (refreshnul jsi str√°nku s ?code= v URL?)
2. Code expiroval (ƒçekal jsi p≈ô√≠li≈° dlouho)
3. Redirect URI mismatch

Keycloak detail: ${errorData.error_description}`);
        }
        
        throw new Error(`Token request failed: ${tokenResponse.status} ${errorData.error}: ${errorData.error_description}`);
      }
      
      const tokens = await tokenResponse.json();
      console.log('‚úÖ Tokeny z√≠sk√°ny √∫spƒõ≈°nƒõ');
      console.log('üîç Token response:', {
        hasAccessToken: !!tokens.access_token,
        tokenType: tokens.token_type,
        expiresIn: tokens.expires_in,
        hasIdToken: !!tokens.id_token
      });
      
      // Ulo≈æ tokeny
      localStorage.setItem('access_token', tokens.access_token);
      if (tokens.id_token) localStorage.setItem('id_token', tokens.id_token);
      if (tokens.refresh_token) localStorage.setItem('refresh_token', tokens.refresh_token);
      
      // Zkus z√≠skat user info z ID tokenu
      if (tokens.id_token) {
        console.log('üÜî Parsuju user info z ID tokenu...');
        parseUserInfoFromIdToken(tokens.id_token);
      } else {
        // Fallback na UserInfo endpoint
        await fetchUserInfo(tokens.access_token);
      }
      
    } catch (error) {
      console.error('‚ùå Chyba p≈ôi v√Ωmƒõnƒõ code za token:', error);
      const errorMessage = error instanceof Error ? error.message : 'Nezn√°m√° chyba';
      alert(`Chyba p≈ôi dokonƒçov√°n√≠ p≈ôihl√°≈°en√≠: ${errorMessage}`);
      setLoading(false);
    }
  };

  // Parsov√°n√≠ user info z ID tokenu
  const parseUserInfoFromIdToken = (idToken: string): void => {
    try {
      // ID token je JWT - parsuj payload (prost≈ôedn√≠ ƒç√°st mezi teƒçkami)
      const tokenParts = idToken.split('.');
      if (tokenParts.length !== 3) {
        throw new Error('Neplatn√Ω ID token form√°t');
      }
      
      // Dek√≥duj base64 payload
      const payload = JSON.parse(atob(tokenParts[1]));
      console.log('üÜî ID token payload:', payload);
      
      setIsAuthenticated(true);
      setUserInfo({
        name: payload.name || `${payload.given_name || ''} ${payload.family_name || ''}`.trim() || payload.preferred_username || 'Nezn√°m√Ω u≈æivatel',
        email: payload.email || 'N/A',
        preferred_username: payload.preferred_username || 'N/A',
        given_name: payload.given_name || 'N/A',
        family_name: payload.family_name || 'N/A',
        sub: payload.sub || 'N/A',
        roles: payload.realm_access?.roles || payload.groups || payload.roles || []
      });
      
      // Ulo≈æ user info
      localStorage.setItem('user_info', JSON.stringify({
        name: payload.name || `${payload.given_name || ''} ${payload.family_name || ''}`.trim() || payload.preferred_username || 'Nezn√°m√Ω u≈æivatel',
        email: payload.email || 'N/A',
        preferred_username: payload.preferred_username || 'N/A',
        given_name: payload.given_name || 'N/A',
        family_name: payload.family_name || 'N/A',
        sub: payload.sub || 'N/A',
        roles: payload.realm_access?.roles || payload.groups || payload.roles || []
      }));
      
      console.log('üéâ U≈æivatel √∫spƒõ≈°nƒõ p≈ôihl√°≈°en z ID tokenu!');
      
      // Vyƒçisti URL a pou≈æit√Ω code
      window.history.replaceState({}, document.title, window.location.pathname);
      localStorage.removeItem('used_auth_code');
      setLoading(false);
      
    } catch (error) {
      console.error('‚ùå Chyba p≈ôi parsov√°n√≠ ID tokenu:', error);
      console.log('üîÑ Fallback na UserInfo endpoint...');
      
      // Fallback na UserInfo endpoint
      const accessToken = localStorage.getItem('access_token');
      if (accessToken) {
        fetchUserInfo(accessToken);
      } else {
        setLoading(false);
      }
    }
  };

  // Z√≠sk√°n√≠ user info z UserInfo endpointu (fallback)
  const fetchUserInfo = async (accessToken: string): Promise<void> => {
    try {
      console.log('üë§ Z√≠sk√°v√°m informace o u≈æivateli...');
      
      const userInfoUrl = `${KEYCLOAK_CONFIG.url}/realms/${KEYCLOAK_CONFIG.realm}/protocol/openid-connect/userinfo`;
      console.log('üì° UserInfo endpoint:', userInfoUrl);
      
      const userInfoResponse = await fetch(userInfoUrl, {
        headers: {
          'Authorization': `Bearer ${accessToken}`
        }
      });
      
      console.log('üîç UserInfo response status:', userInfoResponse.status, userInfoResponse.statusText);
      
      if (!userInfoResponse.ok) {
        const errorText = await userInfoResponse.text();
        console.error('‚ùå UserInfo error response:', errorText);
        throw new Error(`UserInfo request failed: ${userInfoResponse.status} ${userInfoResponse.statusText}`);
      }
      
      const userData = await userInfoResponse.json();
      console.log('‚úÖ User info z√≠sk√°ny:', userData);
      
      setIsAuthenticated(true);
      setUserInfo({
        name: userData.name || `${userData.given_name || ''} ${userData.family_name || ''}`.trim() || userData.preferred_username || 'Nezn√°m√Ω u≈æivatel',
        email: userData.email || 'N/A',
        preferred_username: userData.preferred_username || 'N/A',
        given_name: userData.given_name || 'N/A',
        family_name: userData.family_name || 'N/A',
        sub: userData.sub || 'N/A',
        roles: userData.realm_access?.roles || userData.groups || []
      });
      
      // Ulo≈æ user info
      localStorage.setItem('user_info', JSON.stringify({
        name: userData.name || `${userData.given_name || ''} ${userData.family_name || ''}`.trim() || userData.preferred_username || 'Nezn√°m√Ω u≈æivatel',
        email: userData.email || 'N/A',
        preferred_username: userData.preferred_username || 'N/A',
        given_name: userData.given_name || 'N/A',
        family_name: userData.family_name || 'N/A',
        sub: userData.sub || 'N/A',
        roles: userData.realm_access?.roles || userData.groups || []
      }));
      
      console.log('üéâ U≈æivatel √∫spƒõ≈°nƒõ p≈ôihl√°≈°en z UserInfo!');
      
      // Vyƒçisti URL
      window.history.replaceState({}, document.title, window.location.pathname);
      localStorage.removeItem('used_auth_code');
      setLoading(false);
      
    } catch (error) {
      console.error('‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ user info:', error);
      const errorMessage = error instanceof Error ? error.message : 'Nezn√°m√° chyba';
      
      // Pro localhost development - pou≈æij fallback
      if (window.location.hostname === 'localhost' && errorMessage.includes('401')) {
        console.log('üí° CORS/401 chyba na localhost - pou≈æ√≠v√°m fallback user info');
        setIsAuthenticated(true);
        setUserInfo({
          name: 'Test U≈æivatel (Fallback)',
          email: 'test@localhost.com',
          preferred_username: 'test.user',
          given_name: 'Test',
          family_name: 'U≈æivatel',
          sub: 'localhost-test-user',
          roles: ['user']
        });
        
        window.history.replaceState({}, document.title, window.location.pathname);
        setLoading(false);
        return;
      }
      
      alert(`Chyba p≈ôi z√≠sk√°v√°n√≠ informac√≠ o u≈æivateli: ${errorMessage}`);
      setLoading(false);
    }
  };

  const checkAuthStatus = (): void => {
    console.log('üîç Kontroluji stav p≈ôihl√°≈°en√≠...');
    const token = localStorage.getItem('access_token');
    
    if (token) {
      console.log('‚úÖ Na≈°el jsem ulo≈æen√Ω token');
      
      // Naƒçti ulo≈æen√© user info
      const storedUserInfo = localStorage.getItem('user_info');
      if (storedUserInfo) {
        try {
          const parsedUserInfo = JSON.parse(storedUserInfo);
          setUserInfo(parsedUserInfo);
          setIsAuthenticated(true);
          console.log('‚úÖ User info naƒçteny z localStorage');
        } catch (error) {
          console.error('‚ùå Chyba p≈ôi parsov√°n√≠ user info:', error);
          // Pokud je token ale user info je po≈°kozen√©, zkus znovu naƒç√≠st
          fetchUserInfo(token);
        }
      } else {
        // Pokud m√°me token ale ne user info, naƒçti je
        console.log('üîÑ Naƒç√≠t√°m user info pro existuj√≠c√≠ token...');
        fetchUserInfo(token);
      }
    } else {
      console.log('‚ùå ≈Ω√°dn√Ω token nenalezen');
    }
  };

  const login = (): void => {
    console.log('üîê Zahajuji p≈ôihl√°≈°en√≠...');
    
    const redirectUri = window.location.origin;
    const authUrl = `${KEYCLOAK_CONFIG.url}/realms/${KEYCLOAK_CONFIG.realm}/protocol/openid-connect/auth` +
      `?client_id=${KEYCLOAK_CONFIG.clientId}` +
      `&redirect_uri=${encodeURIComponent(redirectUri)}` +
      `&response_type=code` +
      `&scope=openid profile email roles` +
      `&state=${Date.now()}`;
    
    console.log('üåê P≈ôesmƒõrov√°v√°m na Keycloak:', authUrl);
    console.log('üìã Po≈æadovan√© scope: openid, profile, email, roles');
    console.log('üîç Redirect URI odes√≠l√°no do Keycloak:', redirectUri);
    
    // P≈ôesmƒõrov√°n√≠ na Keycloak
    window.location.href = authUrl;
  };

  const logout = (): void => {
    console.log('üëã Odhla≈°uji u≈æivatele...');
    
    // Sma≈æ v≈°echny tokeny a data
    localStorage.removeItem('access_token');
    localStorage.removeItem('refresh_token');
    localStorage.removeItem('id_token');
    localStorage.removeItem('user_info');
    localStorage.removeItem('used_auth_code');
    
    setIsAuthenticated(false);
    setUserInfo(null);
    
    console.log('‚úÖ U≈æivatel odhl√°≈°en');
  };

  // Debug funkce pro smaz√°n√≠ v≈°ech dat
  const clearAllData = (): void => {
    localStorage.clear();
    sessionStorage.clear();
    console.log('üßπ V≈°echna data smaz√°na');
    window.location.reload();
  };

  if (loading) {
    return (
      <div className="loading-container">
        <div className="loading-spinner"></div>
        <p>Naƒç√≠t√°m...</p>
      </div>
    );
  }

  return (
    <div className="app">
      <nav className="navbar">
        <div className="nav-content">
          <div className="nav-left">
            <h1>OIDC Demo App</h1>
            {process.env.NODE_ENV === 'development' && (
              <span className="demo-badge">Demo Mode</span>
            )}
          </div>
          <div className="nav-right">
            {isAuthenticated ? (
              <>
                <span className="user-greeting">V√≠tej, {userInfo?.name}</span>
                <button onClick={logout} className="btn btn-danger">
                  Odhl√°sit se
                </button>
              </>
            ) : (
              <button onClick={login} className="btn btn-primary">
                P≈ôihl√°sit se
              </button>
            )}
          </div>
        </div>
      </nav>

      <main className="main-content">
        {!isAuthenticated ? (
          <div className="login-container">
            <div className="login-card">
              <h2>P≈ôihl√°≈°en√≠ vy≈æadov√°no</h2>
              <p>Pro p≈ô√≠stup do aplikace se mus√≠te p≈ôihl√°sit pomoc√≠ Keycloak OIDC.</p>
              
              {process.env.NODE_ENV === 'development' && (
                <div className="debug-info">
                  <h4>Debug informace:</h4>
                  <div><strong>Keycloak URL:</strong> {KEYCLOAK_CONFIG.url}</div>
                  <div><strong>Realm:</strong> {KEYCLOAK_CONFIG.realm}</div>
                  <div><strong>Client ID:</strong> {KEYCLOAK_CONFIG.clientId}</div>
                  <div><strong>Scope:</strong> openid profile email roles</div>
                  <div><strong>Response Type:</strong> code (Authorization Code Flow)</div>
                </div>
              )}
              
              <button onClick={login} className="btn btn-primary btn-large">
                üîê P≈ôihl√°sit p≈ôes Keycloak
              </button>
              
              {process.env.NODE_ENV === 'development' && (
                <button 
                  onClick={clearAllData} 
                  className="btn btn-danger"
                  style={{marginTop: '16px', fontSize: '14px'}}
                >
                  üßπ Smazat v≈°echna data (debug)
                </button>
              )}
            </div>
          </div>
        ) : (
          <div className="dashboard">
            <div className="card success-card">
              <h2>üéâ JSTE √öSPƒö≈†Nƒö P≈òIHL√Å≈†ENI!</h2>
              <p>V√≠tejte v aplikaci! P≈ôihl√°≈°en√≠ probƒõhlo √∫spƒõ≈°nƒõ pomoc√≠ Keycloak OIDC.</p>
              
              <div className="user-info">
                <h3>Va≈°e informace:</h3>
                <div><strong>Cel√© jm√©no:</strong> {userInfo?.name}</div>
                <div><strong>Username:</strong> {userInfo?.preferred_username}</div>
                <div><strong>Email:</strong> {userInfo?.email}</div>
                <div><strong>Role:</strong> {userInfo?.roles?.join(', ')}</div>
                <div><strong>User ID:</strong> <code>{userInfo?.sub || 'N/A'}</code></div>
                <div><strong>Stav:</strong> <span className="status-active">‚úÖ Aktivn√≠ relace</span></div>
              </div>
            </div>
            
            <div className="card">
              <h3>üîê Informace o p≈ôihl√°≈°en√≠</h3>
              <p>Detaily o va≈°√≠ aktu√°ln√≠ OIDC relaci:</p>
              <div className="auth-details">
                <div>‚úÖ Autentizace: OIDC/OAuth 2.0</div>
                <div>‚úÖ Poskytovatel: Keycloak (identity.tskoda.vwgroup.com)</div>
                <div>‚úÖ Zabezpeƒçen√≠: SSL/TLS</div>
                <div>‚úÖ Session: Aktivn√≠</div>
                <div>‚úÖ Token Type: Bearer</div>
                <div>‚úÖ Scope: openid profile email roles</div>
              </div>
            </div>
          </div>
        )}
      </main>
    </div>
  );
};

export default App;